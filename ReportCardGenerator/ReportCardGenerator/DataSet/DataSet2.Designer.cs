//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace ReportCardGenerator.DataSet {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DataSet2")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DataSet2 : global::System.Data.DataSet {
        
        private StudentCardTableDataTable tableStudentCardTable;
        
        private SkillTerm1DataTable tableSkillTerm1;
        
        private SkillTerm2DataTable tableSkillTerm2;
        
        private SkillTerm3DataTable tableSkillTerm3;
        
        private SkillNameDataTable tableSkillName;
        
        private Term3DataTable tableTerm3;
        
        private Term2DataTable tableTerm2;
        
        private Term1DataTable tableTerm1;
        
        private SubjectTerm1DataTable tableSubjectTerm1;
        
        private SubjectTerm3DataTable tableSubjectTerm3;
        
        private SubjectNameDataTable tableSubjectName;
        
        private SubjectTerm2DataTable tableSubjectTerm2;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DataSet2() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DataSet2(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["StudentCardTable"] != null)) {
                    base.Tables.Add(new StudentCardTableDataTable(ds.Tables["StudentCardTable"]));
                }
                if ((ds.Tables["SkillTerm1"] != null)) {
                    base.Tables.Add(new SkillTerm1DataTable(ds.Tables["SkillTerm1"]));
                }
                if ((ds.Tables["SkillTerm2"] != null)) {
                    base.Tables.Add(new SkillTerm2DataTable(ds.Tables["SkillTerm2"]));
                }
                if ((ds.Tables["SkillTerm3"] != null)) {
                    base.Tables.Add(new SkillTerm3DataTable(ds.Tables["SkillTerm3"]));
                }
                if ((ds.Tables["SkillName"] != null)) {
                    base.Tables.Add(new SkillNameDataTable(ds.Tables["SkillName"]));
                }
                if ((ds.Tables["Term3"] != null)) {
                    base.Tables.Add(new Term3DataTable(ds.Tables["Term3"]));
                }
                if ((ds.Tables["Term2"] != null)) {
                    base.Tables.Add(new Term2DataTable(ds.Tables["Term2"]));
                }
                if ((ds.Tables["Term1"] != null)) {
                    base.Tables.Add(new Term1DataTable(ds.Tables["Term1"]));
                }
                if ((ds.Tables["SubjectTerm1"] != null)) {
                    base.Tables.Add(new SubjectTerm1DataTable(ds.Tables["SubjectTerm1"]));
                }
                if ((ds.Tables["SubjectTerm3"] != null)) {
                    base.Tables.Add(new SubjectTerm3DataTable(ds.Tables["SubjectTerm3"]));
                }
                if ((ds.Tables["SubjectName"] != null)) {
                    base.Tables.Add(new SubjectNameDataTable(ds.Tables["SubjectName"]));
                }
                if ((ds.Tables["SubjectTerm2"] != null)) {
                    base.Tables.Add(new SubjectTerm2DataTable(ds.Tables["SubjectTerm2"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StudentCardTableDataTable StudentCardTable {
            get {
                return this.tableStudentCardTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SkillTerm1DataTable SkillTerm1 {
            get {
                return this.tableSkillTerm1;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SkillTerm2DataTable SkillTerm2 {
            get {
                return this.tableSkillTerm2;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SkillTerm3DataTable SkillTerm3 {
            get {
                return this.tableSkillTerm3;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SkillNameDataTable SkillName {
            get {
                return this.tableSkillName;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Term3DataTable Term3 {
            get {
                return this.tableTerm3;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Term2DataTable Term2 {
            get {
                return this.tableTerm2;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Term1DataTable Term1 {
            get {
                return this.tableTerm1;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SubjectTerm1DataTable SubjectTerm1 {
            get {
                return this.tableSubjectTerm1;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SubjectTerm3DataTable SubjectTerm3 {
            get {
                return this.tableSubjectTerm3;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SubjectNameDataTable SubjectName {
            get {
                return this.tableSubjectName;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SubjectTerm2DataTable SubjectTerm2 {
            get {
                return this.tableSubjectTerm2;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            DataSet2 cln = ((DataSet2)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["StudentCardTable"] != null)) {
                    base.Tables.Add(new StudentCardTableDataTable(ds.Tables["StudentCardTable"]));
                }
                if ((ds.Tables["SkillTerm1"] != null)) {
                    base.Tables.Add(new SkillTerm1DataTable(ds.Tables["SkillTerm1"]));
                }
                if ((ds.Tables["SkillTerm2"] != null)) {
                    base.Tables.Add(new SkillTerm2DataTable(ds.Tables["SkillTerm2"]));
                }
                if ((ds.Tables["SkillTerm3"] != null)) {
                    base.Tables.Add(new SkillTerm3DataTable(ds.Tables["SkillTerm3"]));
                }
                if ((ds.Tables["SkillName"] != null)) {
                    base.Tables.Add(new SkillNameDataTable(ds.Tables["SkillName"]));
                }
                if ((ds.Tables["Term3"] != null)) {
                    base.Tables.Add(new Term3DataTable(ds.Tables["Term3"]));
                }
                if ((ds.Tables["Term2"] != null)) {
                    base.Tables.Add(new Term2DataTable(ds.Tables["Term2"]));
                }
                if ((ds.Tables["Term1"] != null)) {
                    base.Tables.Add(new Term1DataTable(ds.Tables["Term1"]));
                }
                if ((ds.Tables["SubjectTerm1"] != null)) {
                    base.Tables.Add(new SubjectTerm1DataTable(ds.Tables["SubjectTerm1"]));
                }
                if ((ds.Tables["SubjectTerm3"] != null)) {
                    base.Tables.Add(new SubjectTerm3DataTable(ds.Tables["SubjectTerm3"]));
                }
                if ((ds.Tables["SubjectName"] != null)) {
                    base.Tables.Add(new SubjectNameDataTable(ds.Tables["SubjectName"]));
                }
                if ((ds.Tables["SubjectTerm2"] != null)) {
                    base.Tables.Add(new SubjectTerm2DataTable(ds.Tables["SubjectTerm2"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableStudentCardTable = ((StudentCardTableDataTable)(base.Tables["StudentCardTable"]));
            if ((initTable == true)) {
                if ((this.tableStudentCardTable != null)) {
                    this.tableStudentCardTable.InitVars();
                }
            }
            this.tableSkillTerm1 = ((SkillTerm1DataTable)(base.Tables["SkillTerm1"]));
            if ((initTable == true)) {
                if ((this.tableSkillTerm1 != null)) {
                    this.tableSkillTerm1.InitVars();
                }
            }
            this.tableSkillTerm2 = ((SkillTerm2DataTable)(base.Tables["SkillTerm2"]));
            if ((initTable == true)) {
                if ((this.tableSkillTerm2 != null)) {
                    this.tableSkillTerm2.InitVars();
                }
            }
            this.tableSkillTerm3 = ((SkillTerm3DataTable)(base.Tables["SkillTerm3"]));
            if ((initTable == true)) {
                if ((this.tableSkillTerm3 != null)) {
                    this.tableSkillTerm3.InitVars();
                }
            }
            this.tableSkillName = ((SkillNameDataTable)(base.Tables["SkillName"]));
            if ((initTable == true)) {
                if ((this.tableSkillName != null)) {
                    this.tableSkillName.InitVars();
                }
            }
            this.tableTerm3 = ((Term3DataTable)(base.Tables["Term3"]));
            if ((initTable == true)) {
                if ((this.tableTerm3 != null)) {
                    this.tableTerm3.InitVars();
                }
            }
            this.tableTerm2 = ((Term2DataTable)(base.Tables["Term2"]));
            if ((initTable == true)) {
                if ((this.tableTerm2 != null)) {
                    this.tableTerm2.InitVars();
                }
            }
            this.tableTerm1 = ((Term1DataTable)(base.Tables["Term1"]));
            if ((initTable == true)) {
                if ((this.tableTerm1 != null)) {
                    this.tableTerm1.InitVars();
                }
            }
            this.tableSubjectTerm1 = ((SubjectTerm1DataTable)(base.Tables["SubjectTerm1"]));
            if ((initTable == true)) {
                if ((this.tableSubjectTerm1 != null)) {
                    this.tableSubjectTerm1.InitVars();
                }
            }
            this.tableSubjectTerm3 = ((SubjectTerm3DataTable)(base.Tables["SubjectTerm3"]));
            if ((initTable == true)) {
                if ((this.tableSubjectTerm3 != null)) {
                    this.tableSubjectTerm3.InitVars();
                }
            }
            this.tableSubjectName = ((SubjectNameDataTable)(base.Tables["SubjectName"]));
            if ((initTable == true)) {
                if ((this.tableSubjectName != null)) {
                    this.tableSubjectName.InitVars();
                }
            }
            this.tableSubjectTerm2 = ((SubjectTerm2DataTable)(base.Tables["SubjectTerm2"]));
            if ((initTable == true)) {
                if ((this.tableSubjectTerm2 != null)) {
                    this.tableSubjectTerm2.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DataSet2";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSet2.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableStudentCardTable = new StudentCardTableDataTable();
            base.Tables.Add(this.tableStudentCardTable);
            this.tableSkillTerm1 = new SkillTerm1DataTable();
            base.Tables.Add(this.tableSkillTerm1);
            this.tableSkillTerm2 = new SkillTerm2DataTable();
            base.Tables.Add(this.tableSkillTerm2);
            this.tableSkillTerm3 = new SkillTerm3DataTable();
            base.Tables.Add(this.tableSkillTerm3);
            this.tableSkillName = new SkillNameDataTable();
            base.Tables.Add(this.tableSkillName);
            this.tableTerm3 = new Term3DataTable();
            base.Tables.Add(this.tableTerm3);
            this.tableTerm2 = new Term2DataTable();
            base.Tables.Add(this.tableTerm2);
            this.tableTerm1 = new Term1DataTable();
            base.Tables.Add(this.tableTerm1);
            this.tableSubjectTerm1 = new SubjectTerm1DataTable();
            base.Tables.Add(this.tableSubjectTerm1);
            this.tableSubjectTerm3 = new SubjectTerm3DataTable();
            base.Tables.Add(this.tableSubjectTerm3);
            this.tableSubjectName = new SubjectNameDataTable();
            base.Tables.Add(this.tableSubjectName);
            this.tableSubjectTerm2 = new SubjectTerm2DataTable();
            base.Tables.Add(this.tableSubjectTerm2);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStudentCardTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSkillTerm1() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSkillTerm2() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSkillTerm3() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSkillName() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTerm3() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTerm2() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTerm1() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSubjectTerm1() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSubjectTerm3() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSubjectName() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSubjectTerm2() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DataSet2 ds = new DataSet2();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void StudentCardTableRowChangeEventHandler(object sender, StudentCardTableRowChangeEvent e);
        
        public delegate void SkillTerm1RowChangeEventHandler(object sender, SkillTerm1RowChangeEvent e);
        
        public delegate void SkillTerm2RowChangeEventHandler(object sender, SkillTerm2RowChangeEvent e);
        
        public delegate void SkillTerm3RowChangeEventHandler(object sender, SkillTerm3RowChangeEvent e);
        
        public delegate void SkillNameRowChangeEventHandler(object sender, SkillNameRowChangeEvent e);
        
        public delegate void Term3RowChangeEventHandler(object sender, Term3RowChangeEvent e);
        
        public delegate void Term2RowChangeEventHandler(object sender, Term2RowChangeEvent e);
        
        public delegate void Term1RowChangeEventHandler(object sender, Term1RowChangeEvent e);
        
        public delegate void SubjectTerm1RowChangeEventHandler(object sender, SubjectTerm1RowChangeEvent e);
        
        public delegate void SubjectTerm3RowChangeEventHandler(object sender, SubjectTerm3RowChangeEvent e);
        
        public delegate void SubjectNameRowChangeEventHandler(object sender, SubjectNameRowChangeEvent e);
        
        public delegate void SubjectTerm2RowChangeEventHandler(object sender, SubjectTerm2RowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StudentCardTableDataTable : global::System.Data.TypedTableBase<StudentCardTableRow> {
            
            private global::System.Data.DataColumn columnStudentId;
            
            private global::System.Data.DataColumn columnFirstname;
            
            private global::System.Data.DataColumn columnLastname;
            
            private global::System.Data.DataColumn columnGrade;
            
            private global::System.Data.DataColumn columnSection;
            
            private global::System.Data.DataColumn columnAdviser;
            
            private global::System.Data.DataColumn columnSY;
            
            private global::System.Data.DataColumn columnT1SchooDays;
            
            private global::System.Data.DataColumn columnT2SchooDays;
            
            private global::System.Data.DataColumn columnT3SchooDays;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StudentCardTableDataTable() {
                this.TableName = "StudentCardTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StudentCardTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StudentCardTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StudentIdColumn {
                get {
                    return this.columnStudentId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FirstnameColumn {
                get {
                    return this.columnFirstname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastnameColumn {
                get {
                    return this.columnLastname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GradeColumn {
                get {
                    return this.columnGrade;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SectionColumn {
                get {
                    return this.columnSection;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdviserColumn {
                get {
                    return this.columnAdviser;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SYColumn {
                get {
                    return this.columnSY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn T1SchooDaysColumn {
                get {
                    return this.columnT1SchooDays;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn T2SchooDaysColumn {
                get {
                    return this.columnT2SchooDays;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn T3SchooDaysColumn {
                get {
                    return this.columnT3SchooDays;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StudentCardTableRow this[int index] {
                get {
                    return ((StudentCardTableRow)(this.Rows[index]));
                }
            }
            
            public event StudentCardTableRowChangeEventHandler StudentCardTableRowChanging;
            
            public event StudentCardTableRowChangeEventHandler StudentCardTableRowChanged;
            
            public event StudentCardTableRowChangeEventHandler StudentCardTableRowDeleting;
            
            public event StudentCardTableRowChangeEventHandler StudentCardTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStudentCardTableRow(StudentCardTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StudentCardTableRow AddStudentCardTableRow(string StudentId, string Firstname, string Lastname, string Grade, string Section, string Adviser, string SY, string T1SchooDays, string T2SchooDays, string T3SchooDays) {
                StudentCardTableRow rowStudentCardTableRow = ((StudentCardTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        StudentId,
                        Firstname,
                        Lastname,
                        Grade,
                        Section,
                        Adviser,
                        SY,
                        T1SchooDays,
                        T2SchooDays,
                        T3SchooDays};
                rowStudentCardTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowStudentCardTableRow);
                return rowStudentCardTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StudentCardTableRow FindByStudentId(string StudentId) {
                return ((StudentCardTableRow)(this.Rows.Find(new object[] {
                            StudentId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                StudentCardTableDataTable cln = ((StudentCardTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new StudentCardTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnStudentId = base.Columns["StudentId"];
                this.columnFirstname = base.Columns["Firstname"];
                this.columnLastname = base.Columns["Lastname"];
                this.columnGrade = base.Columns["Grade"];
                this.columnSection = base.Columns["Section"];
                this.columnAdviser = base.Columns["Adviser"];
                this.columnSY = base.Columns["SY"];
                this.columnT1SchooDays = base.Columns["T1SchooDays"];
                this.columnT2SchooDays = base.Columns["T2SchooDays"];
                this.columnT3SchooDays = base.Columns["T3SchooDays"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnStudentId = new global::System.Data.DataColumn("StudentId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStudentId);
                this.columnFirstname = new global::System.Data.DataColumn("Firstname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirstname);
                this.columnLastname = new global::System.Data.DataColumn("Lastname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastname);
                this.columnGrade = new global::System.Data.DataColumn("Grade", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrade);
                this.columnSection = new global::System.Data.DataColumn("Section", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSection);
                this.columnAdviser = new global::System.Data.DataColumn("Adviser", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdviser);
                this.columnSY = new global::System.Data.DataColumn("SY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSY);
                this.columnT1SchooDays = new global::System.Data.DataColumn("T1SchooDays", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnT1SchooDays);
                this.columnT2SchooDays = new global::System.Data.DataColumn("T2SchooDays", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnT2SchooDays);
                this.columnT3SchooDays = new global::System.Data.DataColumn("T3SchooDays", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnT3SchooDays);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("StudentCardTableKey11", new global::System.Data.DataColumn[] {
                                this.columnStudentId}, true));
                this.columnStudentId.AllowDBNull = false;
                this.columnStudentId.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StudentCardTableRow NewStudentCardTableRow() {
                return ((StudentCardTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new StudentCardTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(StudentCardTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StudentCardTableRowChanged != null)) {
                    this.StudentCardTableRowChanged(this, new StudentCardTableRowChangeEvent(((StudentCardTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StudentCardTableRowChanging != null)) {
                    this.StudentCardTableRowChanging(this, new StudentCardTableRowChangeEvent(((StudentCardTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StudentCardTableRowDeleted != null)) {
                    this.StudentCardTableRowDeleted(this, new StudentCardTableRowChangeEvent(((StudentCardTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StudentCardTableRowDeleting != null)) {
                    this.StudentCardTableRowDeleting(this, new StudentCardTableRowChangeEvent(((StudentCardTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStudentCardTableRow(StudentCardTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StudentCardTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SkillTerm1DataTable : global::System.Data.TypedTableBase<SkillTerm1Row> {
            
            private global::System.Data.DataColumn columnSkillId;
            
            private global::System.Data.DataColumn columnStudentId;
            
            private global::System.Data.DataColumn columnSkillGrade;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillTerm1DataTable() {
                this.TableName = "SkillTerm1";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SkillTerm1DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SkillTerm1DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SkillIdColumn {
                get {
                    return this.columnSkillId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StudentIdColumn {
                get {
                    return this.columnStudentId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SkillGradeColumn {
                get {
                    return this.columnSkillGrade;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillTerm1Row this[int index] {
                get {
                    return ((SkillTerm1Row)(this.Rows[index]));
                }
            }
            
            public event SkillTerm1RowChangeEventHandler SkillTerm1RowChanging;
            
            public event SkillTerm1RowChangeEventHandler SkillTerm1RowChanged;
            
            public event SkillTerm1RowChangeEventHandler SkillTerm1RowDeleting;
            
            public event SkillTerm1RowChangeEventHandler SkillTerm1RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSkillTerm1Row(SkillTerm1Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillTerm1Row AddSkillTerm1Row(string SkillId, string StudentId, string SkillGrade) {
                SkillTerm1Row rowSkillTerm1Row = ((SkillTerm1Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SkillId,
                        StudentId,
                        SkillGrade};
                rowSkillTerm1Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowSkillTerm1Row);
                return rowSkillTerm1Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SkillTerm1DataTable cln = ((SkillTerm1DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SkillTerm1DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSkillId = base.Columns["SkillId"];
                this.columnStudentId = base.Columns["StudentId"];
                this.columnSkillGrade = base.Columns["SkillGrade"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSkillId = new global::System.Data.DataColumn("SkillId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSkillId);
                this.columnStudentId = new global::System.Data.DataColumn("StudentId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStudentId);
                this.columnSkillGrade = new global::System.Data.DataColumn("SkillGrade", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSkillGrade);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillTerm1Row NewSkillTerm1Row() {
                return ((SkillTerm1Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SkillTerm1Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SkillTerm1Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SkillTerm1RowChanged != null)) {
                    this.SkillTerm1RowChanged(this, new SkillTerm1RowChangeEvent(((SkillTerm1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SkillTerm1RowChanging != null)) {
                    this.SkillTerm1RowChanging(this, new SkillTerm1RowChangeEvent(((SkillTerm1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SkillTerm1RowDeleted != null)) {
                    this.SkillTerm1RowDeleted(this, new SkillTerm1RowChangeEvent(((SkillTerm1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SkillTerm1RowDeleting != null)) {
                    this.SkillTerm1RowDeleting(this, new SkillTerm1RowChangeEvent(((SkillTerm1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSkillTerm1Row(SkillTerm1Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SkillTerm1DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SkillTerm2DataTable : global::System.Data.TypedTableBase<SkillTerm2Row> {
            
            private global::System.Data.DataColumn columnSkillId;
            
            private global::System.Data.DataColumn columnStudentId;
            
            private global::System.Data.DataColumn columnSkillGrade;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillTerm2DataTable() {
                this.TableName = "SkillTerm2";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SkillTerm2DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SkillTerm2DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SkillIdColumn {
                get {
                    return this.columnSkillId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StudentIdColumn {
                get {
                    return this.columnStudentId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SkillGradeColumn {
                get {
                    return this.columnSkillGrade;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillTerm2Row this[int index] {
                get {
                    return ((SkillTerm2Row)(this.Rows[index]));
                }
            }
            
            public event SkillTerm2RowChangeEventHandler SkillTerm2RowChanging;
            
            public event SkillTerm2RowChangeEventHandler SkillTerm2RowChanged;
            
            public event SkillTerm2RowChangeEventHandler SkillTerm2RowDeleting;
            
            public event SkillTerm2RowChangeEventHandler SkillTerm2RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSkillTerm2Row(SkillTerm2Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillTerm2Row AddSkillTerm2Row(string SkillId, string StudentId, string SkillGrade) {
                SkillTerm2Row rowSkillTerm2Row = ((SkillTerm2Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SkillId,
                        StudentId,
                        SkillGrade};
                rowSkillTerm2Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowSkillTerm2Row);
                return rowSkillTerm2Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SkillTerm2DataTable cln = ((SkillTerm2DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SkillTerm2DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSkillId = base.Columns["SkillId"];
                this.columnStudentId = base.Columns["StudentId"];
                this.columnSkillGrade = base.Columns["SkillGrade"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSkillId = new global::System.Data.DataColumn("SkillId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSkillId);
                this.columnStudentId = new global::System.Data.DataColumn("StudentId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStudentId);
                this.columnSkillGrade = new global::System.Data.DataColumn("SkillGrade", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSkillGrade);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillTerm2Row NewSkillTerm2Row() {
                return ((SkillTerm2Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SkillTerm2Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SkillTerm2Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SkillTerm2RowChanged != null)) {
                    this.SkillTerm2RowChanged(this, new SkillTerm2RowChangeEvent(((SkillTerm2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SkillTerm2RowChanging != null)) {
                    this.SkillTerm2RowChanging(this, new SkillTerm2RowChangeEvent(((SkillTerm2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SkillTerm2RowDeleted != null)) {
                    this.SkillTerm2RowDeleted(this, new SkillTerm2RowChangeEvent(((SkillTerm2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SkillTerm2RowDeleting != null)) {
                    this.SkillTerm2RowDeleting(this, new SkillTerm2RowChangeEvent(((SkillTerm2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSkillTerm2Row(SkillTerm2Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SkillTerm2DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SkillTerm3DataTable : global::System.Data.TypedTableBase<SkillTerm3Row> {
            
            private global::System.Data.DataColumn columnSkillId;
            
            private global::System.Data.DataColumn columnStudentId;
            
            private global::System.Data.DataColumn columnSkillGrade;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillTerm3DataTable() {
                this.TableName = "SkillTerm3";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SkillTerm3DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SkillTerm3DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SkillIdColumn {
                get {
                    return this.columnSkillId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StudentIdColumn {
                get {
                    return this.columnStudentId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SkillGradeColumn {
                get {
                    return this.columnSkillGrade;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillTerm3Row this[int index] {
                get {
                    return ((SkillTerm3Row)(this.Rows[index]));
                }
            }
            
            public event SkillTerm3RowChangeEventHandler SkillTerm3RowChanging;
            
            public event SkillTerm3RowChangeEventHandler SkillTerm3RowChanged;
            
            public event SkillTerm3RowChangeEventHandler SkillTerm3RowDeleting;
            
            public event SkillTerm3RowChangeEventHandler SkillTerm3RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSkillTerm3Row(SkillTerm3Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillTerm3Row AddSkillTerm3Row(string SkillId, string StudentId, string SkillGrade) {
                SkillTerm3Row rowSkillTerm3Row = ((SkillTerm3Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SkillId,
                        StudentId,
                        SkillGrade};
                rowSkillTerm3Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowSkillTerm3Row);
                return rowSkillTerm3Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SkillTerm3DataTable cln = ((SkillTerm3DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SkillTerm3DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSkillId = base.Columns["SkillId"];
                this.columnStudentId = base.Columns["StudentId"];
                this.columnSkillGrade = base.Columns["SkillGrade"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSkillId = new global::System.Data.DataColumn("SkillId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSkillId);
                this.columnStudentId = new global::System.Data.DataColumn("StudentId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStudentId);
                this.columnSkillGrade = new global::System.Data.DataColumn("SkillGrade", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSkillGrade);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillTerm3Row NewSkillTerm3Row() {
                return ((SkillTerm3Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SkillTerm3Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SkillTerm3Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SkillTerm3RowChanged != null)) {
                    this.SkillTerm3RowChanged(this, new SkillTerm3RowChangeEvent(((SkillTerm3Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SkillTerm3RowChanging != null)) {
                    this.SkillTerm3RowChanging(this, new SkillTerm3RowChangeEvent(((SkillTerm3Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SkillTerm3RowDeleted != null)) {
                    this.SkillTerm3RowDeleted(this, new SkillTerm3RowChangeEvent(((SkillTerm3Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SkillTerm3RowDeleting != null)) {
                    this.SkillTerm3RowDeleting(this, new SkillTerm3RowChangeEvent(((SkillTerm3Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSkillTerm3Row(SkillTerm3Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SkillTerm3DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SkillNameDataTable : global::System.Data.TypedTableBase<SkillNameRow> {
            
            private global::System.Data.DataColumn columnSkillId;
            
            private global::System.Data.DataColumn columnSkillName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillNameDataTable() {
                this.TableName = "SkillName";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SkillNameDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SkillNameDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SkillIdColumn {
                get {
                    return this.columnSkillId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SkillNameColumn {
                get {
                    return this.columnSkillName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillNameRow this[int index] {
                get {
                    return ((SkillNameRow)(this.Rows[index]));
                }
            }
            
            public event SkillNameRowChangeEventHandler SkillNameRowChanging;
            
            public event SkillNameRowChangeEventHandler SkillNameRowChanged;
            
            public event SkillNameRowChangeEventHandler SkillNameRowDeleting;
            
            public event SkillNameRowChangeEventHandler SkillNameRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSkillNameRow(SkillNameRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillNameRow AddSkillNameRow(string SkillId, string SkillName) {
                SkillNameRow rowSkillNameRow = ((SkillNameRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SkillId,
                        SkillName};
                rowSkillNameRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSkillNameRow);
                return rowSkillNameRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillNameRow FindBySkillId(string SkillId) {
                return ((SkillNameRow)(this.Rows.Find(new object[] {
                            SkillId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SkillNameDataTable cln = ((SkillNameDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SkillNameDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSkillId = base.Columns["SkillId"];
                this.columnSkillName = base.Columns["SkillName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSkillId = new global::System.Data.DataColumn("SkillId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSkillId);
                this.columnSkillName = new global::System.Data.DataColumn("SkillName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSkillName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("SkillNameKey1", new global::System.Data.DataColumn[] {
                                this.columnSkillId}, true));
                this.columnSkillId.AllowDBNull = false;
                this.columnSkillId.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillNameRow NewSkillNameRow() {
                return ((SkillNameRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SkillNameRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SkillNameRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SkillNameRowChanged != null)) {
                    this.SkillNameRowChanged(this, new SkillNameRowChangeEvent(((SkillNameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SkillNameRowChanging != null)) {
                    this.SkillNameRowChanging(this, new SkillNameRowChangeEvent(((SkillNameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SkillNameRowDeleted != null)) {
                    this.SkillNameRowDeleted(this, new SkillNameRowChangeEvent(((SkillNameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SkillNameRowDeleting != null)) {
                    this.SkillNameRowDeleting(this, new SkillNameRowChangeEvent(((SkillNameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSkillNameRow(SkillNameRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SkillNameDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Term3DataTable : global::System.Data.TypedTableBase<Term3Row> {
            
            private global::System.Data.DataColumn columnComment;
            
            private global::System.Data.DataColumn columnAbsents;
            
            private global::System.Data.DataColumn columnLates;
            
            private global::System.Data.DataColumn columnPresent;
            
            private global::System.Data.DataColumn columnStudentId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Term3DataTable() {
                this.TableName = "Term3";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Term3DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Term3DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AbsentsColumn {
                get {
                    return this.columnAbsents;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LatesColumn {
                get {
                    return this.columnLates;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PresentColumn {
                get {
                    return this.columnPresent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StudentIdColumn {
                get {
                    return this.columnStudentId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Term3Row this[int index] {
                get {
                    return ((Term3Row)(this.Rows[index]));
                }
            }
            
            public event Term3RowChangeEventHandler Term3RowChanging;
            
            public event Term3RowChangeEventHandler Term3RowChanged;
            
            public event Term3RowChangeEventHandler Term3RowDeleting;
            
            public event Term3RowChangeEventHandler Term3RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTerm3Row(Term3Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Term3Row AddTerm3Row(string Comment, string Absents, string Lates, string Present, string StudentId) {
                Term3Row rowTerm3Row = ((Term3Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Comment,
                        Absents,
                        Lates,
                        Present,
                        StudentId};
                rowTerm3Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowTerm3Row);
                return rowTerm3Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Term3DataTable cln = ((Term3DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Term3DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnComment = base.Columns["Comment"];
                this.columnAbsents = base.Columns["Absents"];
                this.columnLates = base.Columns["Lates"];
                this.columnPresent = base.Columns["Present"];
                this.columnStudentId = base.Columns["StudentId"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.columnAbsents = new global::System.Data.DataColumn("Absents", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAbsents);
                this.columnLates = new global::System.Data.DataColumn("Lates", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLates);
                this.columnPresent = new global::System.Data.DataColumn("Present", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPresent);
                this.columnStudentId = new global::System.Data.DataColumn("StudentId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStudentId);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Term3Row NewTerm3Row() {
                return ((Term3Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Term3Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Term3Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Term3RowChanged != null)) {
                    this.Term3RowChanged(this, new Term3RowChangeEvent(((Term3Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Term3RowChanging != null)) {
                    this.Term3RowChanging(this, new Term3RowChangeEvent(((Term3Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Term3RowDeleted != null)) {
                    this.Term3RowDeleted(this, new Term3RowChangeEvent(((Term3Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Term3RowDeleting != null)) {
                    this.Term3RowDeleting(this, new Term3RowChangeEvent(((Term3Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTerm3Row(Term3Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Term3DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Term2DataTable : global::System.Data.TypedTableBase<Term2Row> {
            
            private global::System.Data.DataColumn columnComment;
            
            private global::System.Data.DataColumn columnAbsents;
            
            private global::System.Data.DataColumn columnLates;
            
            private global::System.Data.DataColumn columnPresent;
            
            private global::System.Data.DataColumn columnStudentId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Term2DataTable() {
                this.TableName = "Term2";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Term2DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Term2DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AbsentsColumn {
                get {
                    return this.columnAbsents;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LatesColumn {
                get {
                    return this.columnLates;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PresentColumn {
                get {
                    return this.columnPresent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StudentIdColumn {
                get {
                    return this.columnStudentId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Term2Row this[int index] {
                get {
                    return ((Term2Row)(this.Rows[index]));
                }
            }
            
            public event Term2RowChangeEventHandler Term2RowChanging;
            
            public event Term2RowChangeEventHandler Term2RowChanged;
            
            public event Term2RowChangeEventHandler Term2RowDeleting;
            
            public event Term2RowChangeEventHandler Term2RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTerm2Row(Term2Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Term2Row AddTerm2Row(string Comment, string Absents, string Lates, string Present, string StudentId) {
                Term2Row rowTerm2Row = ((Term2Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Comment,
                        Absents,
                        Lates,
                        Present,
                        StudentId};
                rowTerm2Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowTerm2Row);
                return rowTerm2Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Term2DataTable cln = ((Term2DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Term2DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnComment = base.Columns["Comment"];
                this.columnAbsents = base.Columns["Absents"];
                this.columnLates = base.Columns["Lates"];
                this.columnPresent = base.Columns["Present"];
                this.columnStudentId = base.Columns["StudentId"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.columnAbsents = new global::System.Data.DataColumn("Absents", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAbsents);
                this.columnLates = new global::System.Data.DataColumn("Lates", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLates);
                this.columnPresent = new global::System.Data.DataColumn("Present", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPresent);
                this.columnStudentId = new global::System.Data.DataColumn("StudentId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStudentId);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Term2Row NewTerm2Row() {
                return ((Term2Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Term2Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Term2Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Term2RowChanged != null)) {
                    this.Term2RowChanged(this, new Term2RowChangeEvent(((Term2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Term2RowChanging != null)) {
                    this.Term2RowChanging(this, new Term2RowChangeEvent(((Term2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Term2RowDeleted != null)) {
                    this.Term2RowDeleted(this, new Term2RowChangeEvent(((Term2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Term2RowDeleting != null)) {
                    this.Term2RowDeleting(this, new Term2RowChangeEvent(((Term2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTerm2Row(Term2Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Term2DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Term1DataTable : global::System.Data.TypedTableBase<Term1Row> {
            
            private global::System.Data.DataColumn columnComment;
            
            private global::System.Data.DataColumn columnAbsents;
            
            private global::System.Data.DataColumn columnLates;
            
            private global::System.Data.DataColumn columnPresent;
            
            private global::System.Data.DataColumn columnStudentId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Term1DataTable() {
                this.TableName = "Term1";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Term1DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Term1DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AbsentsColumn {
                get {
                    return this.columnAbsents;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LatesColumn {
                get {
                    return this.columnLates;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PresentColumn {
                get {
                    return this.columnPresent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StudentIdColumn {
                get {
                    return this.columnStudentId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Term1Row this[int index] {
                get {
                    return ((Term1Row)(this.Rows[index]));
                }
            }
            
            public event Term1RowChangeEventHandler Term1RowChanging;
            
            public event Term1RowChangeEventHandler Term1RowChanged;
            
            public event Term1RowChangeEventHandler Term1RowDeleting;
            
            public event Term1RowChangeEventHandler Term1RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTerm1Row(Term1Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Term1Row AddTerm1Row(string Comment, string Absents, string Lates, string Present, string StudentId) {
                Term1Row rowTerm1Row = ((Term1Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Comment,
                        Absents,
                        Lates,
                        Present,
                        StudentId};
                rowTerm1Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowTerm1Row);
                return rowTerm1Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Term1DataTable cln = ((Term1DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Term1DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnComment = base.Columns["Comment"];
                this.columnAbsents = base.Columns["Absents"];
                this.columnLates = base.Columns["Lates"];
                this.columnPresent = base.Columns["Present"];
                this.columnStudentId = base.Columns["StudentId"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.columnAbsents = new global::System.Data.DataColumn("Absents", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAbsents);
                this.columnLates = new global::System.Data.DataColumn("Lates", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLates);
                this.columnPresent = new global::System.Data.DataColumn("Present", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPresent);
                this.columnStudentId = new global::System.Data.DataColumn("StudentId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStudentId);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Term1Row NewTerm1Row() {
                return ((Term1Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Term1Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Term1Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Term1RowChanged != null)) {
                    this.Term1RowChanged(this, new Term1RowChangeEvent(((Term1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Term1RowChanging != null)) {
                    this.Term1RowChanging(this, new Term1RowChangeEvent(((Term1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Term1RowDeleted != null)) {
                    this.Term1RowDeleted(this, new Term1RowChangeEvent(((Term1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Term1RowDeleting != null)) {
                    this.Term1RowDeleting(this, new Term1RowChangeEvent(((Term1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTerm1Row(Term1Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Term1DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SubjectTerm1DataTable : global::System.Data.TypedTableBase<SubjectTerm1Row> {
            
            private global::System.Data.DataColumn columnSubjectId;
            
            private global::System.Data.DataColumn columnStudentId;
            
            private global::System.Data.DataColumn columnSubjectGrade;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubjectTerm1DataTable() {
                this.TableName = "SubjectTerm1";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SubjectTerm1DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SubjectTerm1DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubjectIdColumn {
                get {
                    return this.columnSubjectId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StudentIdColumn {
                get {
                    return this.columnStudentId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubjectGradeColumn {
                get {
                    return this.columnSubjectGrade;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubjectTerm1Row this[int index] {
                get {
                    return ((SubjectTerm1Row)(this.Rows[index]));
                }
            }
            
            public event SubjectTerm1RowChangeEventHandler SubjectTerm1RowChanging;
            
            public event SubjectTerm1RowChangeEventHandler SubjectTerm1RowChanged;
            
            public event SubjectTerm1RowChangeEventHandler SubjectTerm1RowDeleting;
            
            public event SubjectTerm1RowChangeEventHandler SubjectTerm1RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSubjectTerm1Row(SubjectTerm1Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubjectTerm1Row AddSubjectTerm1Row(string SubjectId, string StudentId, string SubjectGrade) {
                SubjectTerm1Row rowSubjectTerm1Row = ((SubjectTerm1Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SubjectId,
                        StudentId,
                        SubjectGrade};
                rowSubjectTerm1Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowSubjectTerm1Row);
                return rowSubjectTerm1Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SubjectTerm1DataTable cln = ((SubjectTerm1DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SubjectTerm1DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSubjectId = base.Columns["SubjectId"];
                this.columnStudentId = base.Columns["StudentId"];
                this.columnSubjectGrade = base.Columns["SubjectGrade"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSubjectId = new global::System.Data.DataColumn("SubjectId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubjectId);
                this.columnStudentId = new global::System.Data.DataColumn("StudentId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStudentId);
                this.columnSubjectGrade = new global::System.Data.DataColumn("SubjectGrade", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubjectGrade);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubjectTerm1Row NewSubjectTerm1Row() {
                return ((SubjectTerm1Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SubjectTerm1Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SubjectTerm1Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SubjectTerm1RowChanged != null)) {
                    this.SubjectTerm1RowChanged(this, new SubjectTerm1RowChangeEvent(((SubjectTerm1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SubjectTerm1RowChanging != null)) {
                    this.SubjectTerm1RowChanging(this, new SubjectTerm1RowChangeEvent(((SubjectTerm1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SubjectTerm1RowDeleted != null)) {
                    this.SubjectTerm1RowDeleted(this, new SubjectTerm1RowChangeEvent(((SubjectTerm1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SubjectTerm1RowDeleting != null)) {
                    this.SubjectTerm1RowDeleting(this, new SubjectTerm1RowChangeEvent(((SubjectTerm1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSubjectTerm1Row(SubjectTerm1Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SubjectTerm1DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SubjectTerm3DataTable : global::System.Data.TypedTableBase<SubjectTerm3Row> {
            
            private global::System.Data.DataColumn columnSubjectId;
            
            private global::System.Data.DataColumn columnStudentId;
            
            private global::System.Data.DataColumn columnSubjectGrade;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubjectTerm3DataTable() {
                this.TableName = "SubjectTerm3";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SubjectTerm3DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SubjectTerm3DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubjectIdColumn {
                get {
                    return this.columnSubjectId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StudentIdColumn {
                get {
                    return this.columnStudentId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubjectGradeColumn {
                get {
                    return this.columnSubjectGrade;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubjectTerm3Row this[int index] {
                get {
                    return ((SubjectTerm3Row)(this.Rows[index]));
                }
            }
            
            public event SubjectTerm3RowChangeEventHandler SubjectTerm3RowChanging;
            
            public event SubjectTerm3RowChangeEventHandler SubjectTerm3RowChanged;
            
            public event SubjectTerm3RowChangeEventHandler SubjectTerm3RowDeleting;
            
            public event SubjectTerm3RowChangeEventHandler SubjectTerm3RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSubjectTerm3Row(SubjectTerm3Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubjectTerm3Row AddSubjectTerm3Row(string SubjectId, string StudentId, string SubjectGrade) {
                SubjectTerm3Row rowSubjectTerm3Row = ((SubjectTerm3Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SubjectId,
                        StudentId,
                        SubjectGrade};
                rowSubjectTerm3Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowSubjectTerm3Row);
                return rowSubjectTerm3Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SubjectTerm3DataTable cln = ((SubjectTerm3DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SubjectTerm3DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSubjectId = base.Columns["SubjectId"];
                this.columnStudentId = base.Columns["StudentId"];
                this.columnSubjectGrade = base.Columns["SubjectGrade"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSubjectId = new global::System.Data.DataColumn("SubjectId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubjectId);
                this.columnStudentId = new global::System.Data.DataColumn("StudentId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStudentId);
                this.columnSubjectGrade = new global::System.Data.DataColumn("SubjectGrade", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubjectGrade);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubjectTerm3Row NewSubjectTerm3Row() {
                return ((SubjectTerm3Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SubjectTerm3Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SubjectTerm3Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SubjectTerm3RowChanged != null)) {
                    this.SubjectTerm3RowChanged(this, new SubjectTerm3RowChangeEvent(((SubjectTerm3Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SubjectTerm3RowChanging != null)) {
                    this.SubjectTerm3RowChanging(this, new SubjectTerm3RowChangeEvent(((SubjectTerm3Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SubjectTerm3RowDeleted != null)) {
                    this.SubjectTerm3RowDeleted(this, new SubjectTerm3RowChangeEvent(((SubjectTerm3Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SubjectTerm3RowDeleting != null)) {
                    this.SubjectTerm3RowDeleting(this, new SubjectTerm3RowChangeEvent(((SubjectTerm3Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSubjectTerm3Row(SubjectTerm3Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SubjectTerm3DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SubjectNameDataTable : global::System.Data.TypedTableBase<SubjectNameRow> {
            
            private global::System.Data.DataColumn columnSubjectId;
            
            private global::System.Data.DataColumn columnSubjectName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubjectNameDataTable() {
                this.TableName = "SubjectName";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SubjectNameDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SubjectNameDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubjectIdColumn {
                get {
                    return this.columnSubjectId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubjectNameColumn {
                get {
                    return this.columnSubjectName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubjectNameRow this[int index] {
                get {
                    return ((SubjectNameRow)(this.Rows[index]));
                }
            }
            
            public event SubjectNameRowChangeEventHandler SubjectNameRowChanging;
            
            public event SubjectNameRowChangeEventHandler SubjectNameRowChanged;
            
            public event SubjectNameRowChangeEventHandler SubjectNameRowDeleting;
            
            public event SubjectNameRowChangeEventHandler SubjectNameRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSubjectNameRow(SubjectNameRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubjectNameRow AddSubjectNameRow(string SubjectId, string SubjectName) {
                SubjectNameRow rowSubjectNameRow = ((SubjectNameRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SubjectId,
                        SubjectName};
                rowSubjectNameRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSubjectNameRow);
                return rowSubjectNameRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SubjectNameDataTable cln = ((SubjectNameDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SubjectNameDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSubjectId = base.Columns["SubjectId"];
                this.columnSubjectName = base.Columns["SubjectName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSubjectId = new global::System.Data.DataColumn("SubjectId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubjectId);
                this.columnSubjectName = new global::System.Data.DataColumn("SubjectName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubjectName);
                this.columnSubjectId.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubjectNameRow NewSubjectNameRow() {
                return ((SubjectNameRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SubjectNameRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SubjectNameRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SubjectNameRowChanged != null)) {
                    this.SubjectNameRowChanged(this, new SubjectNameRowChangeEvent(((SubjectNameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SubjectNameRowChanging != null)) {
                    this.SubjectNameRowChanging(this, new SubjectNameRowChangeEvent(((SubjectNameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SubjectNameRowDeleted != null)) {
                    this.SubjectNameRowDeleted(this, new SubjectNameRowChangeEvent(((SubjectNameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SubjectNameRowDeleting != null)) {
                    this.SubjectNameRowDeleting(this, new SubjectNameRowChangeEvent(((SubjectNameRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSubjectNameRow(SubjectNameRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SubjectNameDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SubjectTerm2DataTable : global::System.Data.TypedTableBase<SubjectTerm2Row> {
            
            private global::System.Data.DataColumn columnSubjectId;
            
            private global::System.Data.DataColumn columnStudentId;
            
            private global::System.Data.DataColumn columnSubjectGrade;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubjectTerm2DataTable() {
                this.TableName = "SubjectTerm2";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SubjectTerm2DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SubjectTerm2DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubjectIdColumn {
                get {
                    return this.columnSubjectId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StudentIdColumn {
                get {
                    return this.columnStudentId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubjectGradeColumn {
                get {
                    return this.columnSubjectGrade;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubjectTerm2Row this[int index] {
                get {
                    return ((SubjectTerm2Row)(this.Rows[index]));
                }
            }
            
            public event SubjectTerm2RowChangeEventHandler SubjectTerm2RowChanging;
            
            public event SubjectTerm2RowChangeEventHandler SubjectTerm2RowChanged;
            
            public event SubjectTerm2RowChangeEventHandler SubjectTerm2RowDeleting;
            
            public event SubjectTerm2RowChangeEventHandler SubjectTerm2RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSubjectTerm2Row(SubjectTerm2Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubjectTerm2Row AddSubjectTerm2Row(string SubjectId, string StudentId, string SubjectGrade) {
                SubjectTerm2Row rowSubjectTerm2Row = ((SubjectTerm2Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SubjectId,
                        StudentId,
                        SubjectGrade};
                rowSubjectTerm2Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowSubjectTerm2Row);
                return rowSubjectTerm2Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SubjectTerm2DataTable cln = ((SubjectTerm2DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SubjectTerm2DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSubjectId = base.Columns["SubjectId"];
                this.columnStudentId = base.Columns["StudentId"];
                this.columnSubjectGrade = base.Columns["SubjectGrade"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSubjectId = new global::System.Data.DataColumn("SubjectId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubjectId);
                this.columnStudentId = new global::System.Data.DataColumn("StudentId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStudentId);
                this.columnSubjectGrade = new global::System.Data.DataColumn("SubjectGrade", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubjectGrade);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubjectTerm2Row NewSubjectTerm2Row() {
                return ((SubjectTerm2Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SubjectTerm2Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SubjectTerm2Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SubjectTerm2RowChanged != null)) {
                    this.SubjectTerm2RowChanged(this, new SubjectTerm2RowChangeEvent(((SubjectTerm2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SubjectTerm2RowChanging != null)) {
                    this.SubjectTerm2RowChanging(this, new SubjectTerm2RowChangeEvent(((SubjectTerm2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SubjectTerm2RowDeleted != null)) {
                    this.SubjectTerm2RowDeleted(this, new SubjectTerm2RowChangeEvent(((SubjectTerm2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SubjectTerm2RowDeleting != null)) {
                    this.SubjectTerm2RowDeleting(this, new SubjectTerm2RowChangeEvent(((SubjectTerm2Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSubjectTerm2Row(SubjectTerm2Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet2 ds = new DataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SubjectTerm2DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StudentCardTableRow : global::System.Data.DataRow {
            
            private StudentCardTableDataTable tableStudentCardTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StudentCardTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStudentCardTable = ((StudentCardTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StudentId {
                get {
                    return ((string)(this[this.tableStudentCardTable.StudentIdColumn]));
                }
                set {
                    this[this.tableStudentCardTable.StudentIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Firstname {
                get {
                    try {
                        return ((string)(this[this.tableStudentCardTable.FirstnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Firstname\' in table \'StudentCardTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStudentCardTable.FirstnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Lastname {
                get {
                    try {
                        return ((string)(this[this.tableStudentCardTable.LastnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Lastname\' in table \'StudentCardTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStudentCardTable.LastnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Grade {
                get {
                    try {
                        return ((string)(this[this.tableStudentCardTable.GradeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Grade\' in table \'StudentCardTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStudentCardTable.GradeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Section {
                get {
                    try {
                        return ((string)(this[this.tableStudentCardTable.SectionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Section\' in table \'StudentCardTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStudentCardTable.SectionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Adviser {
                get {
                    try {
                        return ((string)(this[this.tableStudentCardTable.AdviserColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Adviser\' in table \'StudentCardTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStudentCardTable.AdviserColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SY {
                get {
                    try {
                        return ((string)(this[this.tableStudentCardTable.SYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SY\' in table \'StudentCardTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStudentCardTable.SYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string T1SchooDays {
                get {
                    try {
                        return ((string)(this[this.tableStudentCardTable.T1SchooDaysColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'T1SchooDays\' in table \'StudentCardTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStudentCardTable.T1SchooDaysColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string T2SchooDays {
                get {
                    try {
                        return ((string)(this[this.tableStudentCardTable.T2SchooDaysColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'T2SchooDays\' in table \'StudentCardTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStudentCardTable.T2SchooDaysColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string T3SchooDays {
                get {
                    try {
                        return ((string)(this[this.tableStudentCardTable.T3SchooDaysColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'T3SchooDays\' in table \'StudentCardTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStudentCardTable.T3SchooDaysColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFirstnameNull() {
                return this.IsNull(this.tableStudentCardTable.FirstnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFirstnameNull() {
                this[this.tableStudentCardTable.FirstnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastnameNull() {
                return this.IsNull(this.tableStudentCardTable.LastnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastnameNull() {
                this[this.tableStudentCardTable.LastnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGradeNull() {
                return this.IsNull(this.tableStudentCardTable.GradeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGradeNull() {
                this[this.tableStudentCardTable.GradeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSectionNull() {
                return this.IsNull(this.tableStudentCardTable.SectionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSectionNull() {
                this[this.tableStudentCardTable.SectionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdviserNull() {
                return this.IsNull(this.tableStudentCardTable.AdviserColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdviserNull() {
                this[this.tableStudentCardTable.AdviserColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSYNull() {
                return this.IsNull(this.tableStudentCardTable.SYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSYNull() {
                this[this.tableStudentCardTable.SYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsT1SchooDaysNull() {
                return this.IsNull(this.tableStudentCardTable.T1SchooDaysColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetT1SchooDaysNull() {
                this[this.tableStudentCardTable.T1SchooDaysColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsT2SchooDaysNull() {
                return this.IsNull(this.tableStudentCardTable.T2SchooDaysColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetT2SchooDaysNull() {
                this[this.tableStudentCardTable.T2SchooDaysColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsT3SchooDaysNull() {
                return this.IsNull(this.tableStudentCardTable.T3SchooDaysColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetT3SchooDaysNull() {
                this[this.tableStudentCardTable.T3SchooDaysColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SkillTerm1Row : global::System.Data.DataRow {
            
            private SkillTerm1DataTable tableSkillTerm1;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SkillTerm1Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSkillTerm1 = ((SkillTerm1DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SkillId {
                get {
                    try {
                        return ((string)(this[this.tableSkillTerm1.SkillIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SkillId\' in table \'SkillTerm1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSkillTerm1.SkillIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StudentId {
                get {
                    try {
                        return ((string)(this[this.tableSkillTerm1.StudentIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StudentId\' in table \'SkillTerm1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSkillTerm1.StudentIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SkillGrade {
                get {
                    try {
                        return ((string)(this[this.tableSkillTerm1.SkillGradeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SkillGrade\' in table \'SkillTerm1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSkillTerm1.SkillGradeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSkillIdNull() {
                return this.IsNull(this.tableSkillTerm1.SkillIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSkillIdNull() {
                this[this.tableSkillTerm1.SkillIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStudentIdNull() {
                return this.IsNull(this.tableSkillTerm1.StudentIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStudentIdNull() {
                this[this.tableSkillTerm1.StudentIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSkillGradeNull() {
                return this.IsNull(this.tableSkillTerm1.SkillGradeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSkillGradeNull() {
                this[this.tableSkillTerm1.SkillGradeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SkillTerm2Row : global::System.Data.DataRow {
            
            private SkillTerm2DataTable tableSkillTerm2;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SkillTerm2Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSkillTerm2 = ((SkillTerm2DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SkillId {
                get {
                    try {
                        return ((string)(this[this.tableSkillTerm2.SkillIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SkillId\' in table \'SkillTerm2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSkillTerm2.SkillIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StudentId {
                get {
                    try {
                        return ((string)(this[this.tableSkillTerm2.StudentIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StudentId\' in table \'SkillTerm2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSkillTerm2.StudentIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SkillGrade {
                get {
                    try {
                        return ((string)(this[this.tableSkillTerm2.SkillGradeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SkillGrade\' in table \'SkillTerm2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSkillTerm2.SkillGradeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSkillIdNull() {
                return this.IsNull(this.tableSkillTerm2.SkillIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSkillIdNull() {
                this[this.tableSkillTerm2.SkillIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStudentIdNull() {
                return this.IsNull(this.tableSkillTerm2.StudentIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStudentIdNull() {
                this[this.tableSkillTerm2.StudentIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSkillGradeNull() {
                return this.IsNull(this.tableSkillTerm2.SkillGradeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSkillGradeNull() {
                this[this.tableSkillTerm2.SkillGradeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SkillTerm3Row : global::System.Data.DataRow {
            
            private SkillTerm3DataTable tableSkillTerm3;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SkillTerm3Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSkillTerm3 = ((SkillTerm3DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SkillId {
                get {
                    try {
                        return ((string)(this[this.tableSkillTerm3.SkillIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SkillId\' in table \'SkillTerm3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSkillTerm3.SkillIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StudentId {
                get {
                    try {
                        return ((string)(this[this.tableSkillTerm3.StudentIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StudentId\' in table \'SkillTerm3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSkillTerm3.StudentIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SkillGrade {
                get {
                    try {
                        return ((string)(this[this.tableSkillTerm3.SkillGradeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SkillGrade\' in table \'SkillTerm3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSkillTerm3.SkillGradeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSkillIdNull() {
                return this.IsNull(this.tableSkillTerm3.SkillIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSkillIdNull() {
                this[this.tableSkillTerm3.SkillIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStudentIdNull() {
                return this.IsNull(this.tableSkillTerm3.StudentIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStudentIdNull() {
                this[this.tableSkillTerm3.StudentIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSkillGradeNull() {
                return this.IsNull(this.tableSkillTerm3.SkillGradeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSkillGradeNull() {
                this[this.tableSkillTerm3.SkillGradeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SkillNameRow : global::System.Data.DataRow {
            
            private SkillNameDataTable tableSkillName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SkillNameRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSkillName = ((SkillNameDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SkillId {
                get {
                    return ((string)(this[this.tableSkillName.SkillIdColumn]));
                }
                set {
                    this[this.tableSkillName.SkillIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SkillName {
                get {
                    try {
                        return ((string)(this[this.tableSkillName.SkillNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SkillName\' in table \'SkillName\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSkillName.SkillNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSkillNameNull() {
                return this.IsNull(this.tableSkillName.SkillNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSkillNameNull() {
                this[this.tableSkillName.SkillNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Term3Row : global::System.Data.DataRow {
            
            private Term3DataTable tableTerm3;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Term3Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTerm3 = ((Term3DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableTerm3.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'Term3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerm3.CommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Absents {
                get {
                    try {
                        return ((string)(this[this.tableTerm3.AbsentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Absents\' in table \'Term3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerm3.AbsentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Lates {
                get {
                    try {
                        return ((string)(this[this.tableTerm3.LatesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Lates\' in table \'Term3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerm3.LatesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Present {
                get {
                    try {
                        return ((string)(this[this.tableTerm3.PresentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Present\' in table \'Term3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerm3.PresentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StudentId {
                get {
                    try {
                        return ((string)(this[this.tableTerm3.StudentIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StudentId\' in table \'Term3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerm3.StudentIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableTerm3.CommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableTerm3.CommentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAbsentsNull() {
                return this.IsNull(this.tableTerm3.AbsentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAbsentsNull() {
                this[this.tableTerm3.AbsentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLatesNull() {
                return this.IsNull(this.tableTerm3.LatesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLatesNull() {
                this[this.tableTerm3.LatesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPresentNull() {
                return this.IsNull(this.tableTerm3.PresentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPresentNull() {
                this[this.tableTerm3.PresentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStudentIdNull() {
                return this.IsNull(this.tableTerm3.StudentIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStudentIdNull() {
                this[this.tableTerm3.StudentIdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Term2Row : global::System.Data.DataRow {
            
            private Term2DataTable tableTerm2;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Term2Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTerm2 = ((Term2DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableTerm2.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'Term2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerm2.CommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Absents {
                get {
                    try {
                        return ((string)(this[this.tableTerm2.AbsentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Absents\' in table \'Term2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerm2.AbsentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Lates {
                get {
                    try {
                        return ((string)(this[this.tableTerm2.LatesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Lates\' in table \'Term2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerm2.LatesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Present {
                get {
                    try {
                        return ((string)(this[this.tableTerm2.PresentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Present\' in table \'Term2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerm2.PresentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StudentId {
                get {
                    try {
                        return ((string)(this[this.tableTerm2.StudentIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StudentId\' in table \'Term2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerm2.StudentIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableTerm2.CommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableTerm2.CommentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAbsentsNull() {
                return this.IsNull(this.tableTerm2.AbsentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAbsentsNull() {
                this[this.tableTerm2.AbsentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLatesNull() {
                return this.IsNull(this.tableTerm2.LatesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLatesNull() {
                this[this.tableTerm2.LatesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPresentNull() {
                return this.IsNull(this.tableTerm2.PresentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPresentNull() {
                this[this.tableTerm2.PresentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStudentIdNull() {
                return this.IsNull(this.tableTerm2.StudentIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStudentIdNull() {
                this[this.tableTerm2.StudentIdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Term1Row : global::System.Data.DataRow {
            
            private Term1DataTable tableTerm1;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Term1Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTerm1 = ((Term1DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableTerm1.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'Term1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerm1.CommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Absents {
                get {
                    try {
                        return ((string)(this[this.tableTerm1.AbsentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Absents\' in table \'Term1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerm1.AbsentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Lates {
                get {
                    try {
                        return ((string)(this[this.tableTerm1.LatesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Lates\' in table \'Term1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerm1.LatesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Present {
                get {
                    try {
                        return ((string)(this[this.tableTerm1.PresentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Present\' in table \'Term1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerm1.PresentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StudentId {
                get {
                    try {
                        return ((string)(this[this.tableTerm1.StudentIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StudentId\' in table \'Term1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTerm1.StudentIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableTerm1.CommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableTerm1.CommentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAbsentsNull() {
                return this.IsNull(this.tableTerm1.AbsentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAbsentsNull() {
                this[this.tableTerm1.AbsentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLatesNull() {
                return this.IsNull(this.tableTerm1.LatesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLatesNull() {
                this[this.tableTerm1.LatesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPresentNull() {
                return this.IsNull(this.tableTerm1.PresentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPresentNull() {
                this[this.tableTerm1.PresentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStudentIdNull() {
                return this.IsNull(this.tableTerm1.StudentIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStudentIdNull() {
                this[this.tableTerm1.StudentIdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SubjectTerm1Row : global::System.Data.DataRow {
            
            private SubjectTerm1DataTable tableSubjectTerm1;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SubjectTerm1Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSubjectTerm1 = ((SubjectTerm1DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubjectId {
                get {
                    try {
                        return ((string)(this[this.tableSubjectTerm1.SubjectIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubjectId\' in table \'SubjectTerm1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectTerm1.SubjectIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StudentId {
                get {
                    try {
                        return ((string)(this[this.tableSubjectTerm1.StudentIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StudentId\' in table \'SubjectTerm1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectTerm1.StudentIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubjectGrade {
                get {
                    try {
                        return ((string)(this[this.tableSubjectTerm1.SubjectGradeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubjectGrade\' in table \'SubjectTerm1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectTerm1.SubjectGradeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubjectIdNull() {
                return this.IsNull(this.tableSubjectTerm1.SubjectIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubjectIdNull() {
                this[this.tableSubjectTerm1.SubjectIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStudentIdNull() {
                return this.IsNull(this.tableSubjectTerm1.StudentIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStudentIdNull() {
                this[this.tableSubjectTerm1.StudentIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubjectGradeNull() {
                return this.IsNull(this.tableSubjectTerm1.SubjectGradeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubjectGradeNull() {
                this[this.tableSubjectTerm1.SubjectGradeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SubjectTerm3Row : global::System.Data.DataRow {
            
            private SubjectTerm3DataTable tableSubjectTerm3;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SubjectTerm3Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSubjectTerm3 = ((SubjectTerm3DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubjectId {
                get {
                    try {
                        return ((string)(this[this.tableSubjectTerm3.SubjectIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubjectId\' in table \'SubjectTerm3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectTerm3.SubjectIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StudentId {
                get {
                    try {
                        return ((string)(this[this.tableSubjectTerm3.StudentIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StudentId\' in table \'SubjectTerm3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectTerm3.StudentIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubjectGrade {
                get {
                    try {
                        return ((string)(this[this.tableSubjectTerm3.SubjectGradeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubjectGrade\' in table \'SubjectTerm3\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectTerm3.SubjectGradeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubjectIdNull() {
                return this.IsNull(this.tableSubjectTerm3.SubjectIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubjectIdNull() {
                this[this.tableSubjectTerm3.SubjectIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStudentIdNull() {
                return this.IsNull(this.tableSubjectTerm3.StudentIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStudentIdNull() {
                this[this.tableSubjectTerm3.StudentIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubjectGradeNull() {
                return this.IsNull(this.tableSubjectTerm3.SubjectGradeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubjectGradeNull() {
                this[this.tableSubjectTerm3.SubjectGradeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SubjectNameRow : global::System.Data.DataRow {
            
            private SubjectNameDataTable tableSubjectName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SubjectNameRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSubjectName = ((SubjectNameDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubjectId {
                get {
                    return ((string)(this[this.tableSubjectName.SubjectIdColumn]));
                }
                set {
                    this[this.tableSubjectName.SubjectIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubjectName {
                get {
                    try {
                        return ((string)(this[this.tableSubjectName.SubjectNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubjectName\' in table \'SubjectName\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectName.SubjectNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubjectNameNull() {
                return this.IsNull(this.tableSubjectName.SubjectNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubjectNameNull() {
                this[this.tableSubjectName.SubjectNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SubjectTerm2Row : global::System.Data.DataRow {
            
            private SubjectTerm2DataTable tableSubjectTerm2;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SubjectTerm2Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSubjectTerm2 = ((SubjectTerm2DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubjectId {
                get {
                    try {
                        return ((string)(this[this.tableSubjectTerm2.SubjectIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubjectId\' in table \'SubjectTerm2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectTerm2.SubjectIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StudentId {
                get {
                    try {
                        return ((string)(this[this.tableSubjectTerm2.StudentIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StudentId\' in table \'SubjectTerm2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectTerm2.StudentIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubjectGrade {
                get {
                    try {
                        return ((string)(this[this.tableSubjectTerm2.SubjectGradeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubjectGrade\' in table \'SubjectTerm2\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSubjectTerm2.SubjectGradeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubjectIdNull() {
                return this.IsNull(this.tableSubjectTerm2.SubjectIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubjectIdNull() {
                this[this.tableSubjectTerm2.SubjectIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStudentIdNull() {
                return this.IsNull(this.tableSubjectTerm2.StudentIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStudentIdNull() {
                this[this.tableSubjectTerm2.StudentIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubjectGradeNull() {
                return this.IsNull(this.tableSubjectTerm2.SubjectGradeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubjectGradeNull() {
                this[this.tableSubjectTerm2.SubjectGradeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StudentCardTableRowChangeEvent : global::System.EventArgs {
            
            private StudentCardTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StudentCardTableRowChangeEvent(StudentCardTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StudentCardTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SkillTerm1RowChangeEvent : global::System.EventArgs {
            
            private SkillTerm1Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillTerm1RowChangeEvent(SkillTerm1Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillTerm1Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SkillTerm2RowChangeEvent : global::System.EventArgs {
            
            private SkillTerm2Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillTerm2RowChangeEvent(SkillTerm2Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillTerm2Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SkillTerm3RowChangeEvent : global::System.EventArgs {
            
            private SkillTerm3Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillTerm3RowChangeEvent(SkillTerm3Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillTerm3Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SkillNameRowChangeEvent : global::System.EventArgs {
            
            private SkillNameRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillNameRowChangeEvent(SkillNameRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SkillNameRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Term3RowChangeEvent : global::System.EventArgs {
            
            private Term3Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Term3RowChangeEvent(Term3Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Term3Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Term2RowChangeEvent : global::System.EventArgs {
            
            private Term2Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Term2RowChangeEvent(Term2Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Term2Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Term1RowChangeEvent : global::System.EventArgs {
            
            private Term1Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Term1RowChangeEvent(Term1Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Term1Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SubjectTerm1RowChangeEvent : global::System.EventArgs {
            
            private SubjectTerm1Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubjectTerm1RowChangeEvent(SubjectTerm1Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubjectTerm1Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SubjectTerm3RowChangeEvent : global::System.EventArgs {
            
            private SubjectTerm3Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubjectTerm3RowChangeEvent(SubjectTerm3Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubjectTerm3Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SubjectNameRowChangeEvent : global::System.EventArgs {
            
            private SubjectNameRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubjectNameRowChangeEvent(SubjectNameRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubjectNameRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SubjectTerm2RowChangeEvent : global::System.EventArgs {
            
            private SubjectTerm2Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubjectTerm2RowChangeEvent(SubjectTerm2Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SubjectTerm2Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591